# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import Bot, Dispatcher, executor, types
from app import keyboards as kb
import random
from dotenv import load_dotenv
import os


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer('''–ü—Ä–∏–≤–µ—Ç —è –ë–æ—Ç –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä.
–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:''', reply_markup=kb.keyboard_random)


# –î–∞ –∏–ª–∏ –ù–µ—Ç
yes_or_no = ['‚úÖ–î–∞', '‚ùå–ù–µ—Ç']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –î–∞ –∏–ª–∏ –ù–µ—Ç
@dp.message_handler(lambda message: message.text == '‚úÖ–î–∞ –∏–ª–∏ ‚ùå–ù–µ—Ç')
async def cmd_yes_or_no(message: types.Message):
    await message.answer(f'{random.choice(yes_or_no)}')


# –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞
rock_scissors_paper = ['üëä–ö–∞–º–µ–Ω—å', '‚úåÔ∏è–ù–æ–∂–Ω–∏—Ü—ã', 'üñêÔ∏è–ë—É–º–∞–≥–∞']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞
@dp.message_handler(lambda message: message.text == 'üëä–ö–∞–º–µ–Ω—å,‚úåÔ∏è–ù–æ–∂–Ω–∏—Ü—ã,üñêÔ∏è–ë—É–º–∞–≥–∞')
async def cmd_rock_scissors_paper(message: types.Message):
    await message.answer(f'{random.choice(rock_scissors_paper)}')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10
@dp.message_handler(lambda message: message.text == 'üé≤–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10')
async def cmd_random_number_from1to10(message: types.Message):
    await message.answer(f'{random.randint(0,10)}')


# –°–ø–∏—Å–æ–∫ –¥–ª—è –∏–≥—Ä—ã –°–ª–æ–≤–æ –∏–ª–∏ –°–ª–æ–≤–æ
words_list_word_or_word = []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ
@dp.message_handler(lambda message: message.text == 'üî§–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ')
async def cmd_word_or_word(message: types.Message):
    await message.answer(f'üìù1/2 –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:')

    @dp.message_handler(lambda message: len(words_list_word_or_word) == 0)
    async def handle_first_word(message: types.Message):
        word = message.text
        words_list_word_or_word.append(word)
        await message.answer('üìù2/2 –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:')

        @dp.message_handler(lambda message: len(words_list_word_or_word) == 1)
        async def handle_second_word(message: types.Message):
            word = message.text
            words_list_word_or_word.append(word)
            await message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ : {random.choice(words_list_word_or_word)}', reply_markup=kb.keyboard_word_or_word_again)

            @dp.callback_query_handler(text='word_or_word_again')
            async def cmd_random_word_again(call_again: types.CallbackQuery):
                await call_again.message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ : {random.choice(words_list_word_or_word)}', reply_markup=kb.keyboard_word_or_word_again)
    words_list_word_or_word.clear()

    @dp.callback_query_handler(text='word_or_word_back')
    async def cmd_word_back(call_back: types.CallbackQuery):
        await call_back.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', reply_markup=kb.keyboard_random)


# –°–ø–∏—Å–æ–∫ –¥–ª—è –∏–≥—Ä—ã –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
list_toss_coin = ['ü¶Ö–û—Ä–µ–ª', 'ü™ô–†–µ—à–∫–∞']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
@dp.message_handler(lambda message: message.text == 'ü™ô–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É')
async def cmd_toss_coin(message:types.Message):
    await message.answer(f'{random.choice(list_toss_coin)}')


# –°–ø–∏—Å–æ–∫ –¥–ª—è –∏–≥—Ä—ã –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –∏ –¥–æ
list_random_number_from_to = []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –∏ –¥–æ
@dp.message_handler(lambda message: message.text == 'üé≤–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –∏ –¥–æ')
async def cmd_random_number_from_to(message: types.Message):
    await message.answer(f'üìù1/2 –í–≤–µ–¥–∏—Ç–µ –æ—Ç —Å–∫–æ–ª—å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ:')

    @dp.message_handler(lambda message_first_num: len(list_random_number_from_to) == 0)
    async def handle_first_number(message: types.Message):
        if message.text.isdigit() is False:
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û!', reply_markup=kb.keyboard_random_number_else)
        else:
            number_first = int(message.text)
            list_random_number_from_to.append(number_first)
            await message.answer(f'üìù2/2 –•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ:')

            @dp.message_handler(lambda message_second_num: len(list_random_number_from_to) == 1)
            async def handle_second_number(message: types.Message):
                if message.text.isdigit() is False:
                    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û!', reply_markup=kb.keyboard_random_number_else)
                else:
                    number_second = int(message.text)
                    list_random_number_from_to.append(number_second)
                    await message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ : {random.randint(list_random_number_from_to[0], list_random_number_from_to[1])}', reply_markup=kb.keyboard_random_num_again)

            @dp.callback_query_handler(text='random_number_again')
            async def cmd_random_number_again(call_again: types.CallbackQuery):
                await call_again.message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ : {random.randint(list_random_number_from_to[0], list_random_number_from_to[1])}', reply_markup=kb.keyboard_random_num_again)
    list_random_number_from_to.clear()

    @dp.callback_query_handler(text='random_number_back')
    async def cmd_word_back(call_back: types.CallbackQuery):
        await call_back.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', reply_markup=kb.keyboard_random)


# –°–ø–∏—Å–æ–∫ –¥–ª—è –∏–≥—Ä—ã –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
list_random_word = []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
@dp.message_handler(lambda message: message.text == 'üî§–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ')
async def cmd_random_word(message: types.Message):
    await message.answer(f'üìù–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:')

    @dp.message_handler(lambda message: len(list_random_word) == 0)
    async def handle_words(message: types.Message):
        list_random_word.extend(message.text.split(','))
        await message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ : {random.choice(list_random_word)}', reply_markup=kb.keyboard_random_word_again)

        @dp.callback_query_handler(text='random_word_again')
        async def cmd_random_word_again(call: types.CallbackQuery):
            await call.message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ : {random.choice(list_random_word)}', reply_markup=kb.keyboard_random_word_again)
    list_random_word.clear()

    @dp.callback_query_handler(text='random_word_back')
    async def cmd_random_word_back(call: types.CallbackQuery):
        await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', reply_markup=kb.keyboard_random)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)